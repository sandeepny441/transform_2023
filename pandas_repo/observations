--------------------LOC

LOC is Label Based Indexiing so 1:3 means 1, 2, 3 - INCLUSIVE
Python in Position based indexing, so 1:3 means 1, 2

 when using label-based indexing with .loc, 
 negative indices don't work as they do in standard Python lists.
 
 
------------------- iLoc

iLOC is purely integer based indexing
iloc follows Python based position based indexing unline LOC

chained indexing - pitfalls 
if we dont use .loc, we might be working on a copy of the dataframe, so the results might not be reflecting the intention. So its better to use .loc when we use chained indexing
When these operations are chained, you might be working on a copy of the data (not always, it depends on the memory layout), so any changes you make don't affect the original DataFrame. On the other hand, .loc ensures that you're working directly on the original DataFrame, making assignments as expected.








